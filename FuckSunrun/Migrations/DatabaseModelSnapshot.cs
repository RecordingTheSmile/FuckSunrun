// <auto-generated />
using FuckSunrun.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FuckSunrun.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FuckSunrun.Models.Entities.SunrunLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BelongTo")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FailReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<long>("SunrunTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SunrunLogs");
                });

            modelBuilder.Entity("FuckSunrun.Models.Entities.SunrunTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BelongTo")
                        .HasColumnType("bigint")
                        .HasColumnName("belong_to");

                    b.Property<long>("CreateAt")
                        .HasColumnType("bigint")
                        .HasColumnName("create_at");

                    b.Property<string>("FailReason")
                        .HasColumnType("text")
                        .HasColumnName("fail_reason");

                    b.Property<int>("Hour")
                        .HasColumnType("integer")
                        .HasColumnName("hour");

                    b.Property<string>("ImeiCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imei_code");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enable");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<int>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("double precision")
                        .HasColumnName("max_speed");

                    b.Property<double>("MinSpeed")
                        .HasColumnType("double precision")
                        .HasColumnName("min_speed");

                    b.Property<int>("Minute")
                        .HasColumnType("integer")
                        .HasColumnName("minute");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("school_name");

                    b.Property<long>("Step")
                        .HasColumnType("bigint")
                        .HasColumnName("step");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("sunrun_user");
                });

            modelBuilder.Entity("FuckSunrun.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("can_login");

                    b.Property<long>("CreateAt")
                        .HasColumnType("bigint")
                        .HasColumnName("create_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<long>("LastLoginAt")
                        .HasColumnType("bigint")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });
#pragma warning restore 612, 618
        }
    }
}
